//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/MobileInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Unicar.Inputs
{
    public partial class @MobileInputs: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MobileInputs()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MobileInputs"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""b64d526b-56b3-4935-8b1a-99d002f6c695"",
            ""actions"": [
                {
                    ""name"": ""Touch0"",
                    ""type"": ""Value"",
                    ""id"": ""75d4f969-8d02-480f-808a-af0153a2c8d2"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch1"",
                    ""type"": ""Value"",
                    ""id"": ""cf0b66a4-6347-448b-9efc-5186382ab962"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c22f99dc-ac91-4edf-a2b9-e754da03b8d3"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5b776fc-2107-404d-9dec-a6710a548699"",
                    ""path"": ""<Touchscreen>/touch1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_Touch0 = m_Touch.FindAction("Touch0", throwIfNotFound: true);
            m_Touch_Touch1 = m_Touch.FindAction("Touch1", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
        private readonly InputAction m_Touch_Touch0;
        private readonly InputAction m_Touch_Touch1;
        public struct TouchActions
        {
            private @MobileInputs m_Wrapper;
            public TouchActions(@MobileInputs wrapper) { m_Wrapper = wrapper; }
            public InputAction @Touch0 => m_Wrapper.m_Touch_Touch0;
            public InputAction @Touch1 => m_Wrapper.m_Touch_Touch1;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void AddCallbacks(ITouchActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
                @Touch0.started += instance.OnTouch0;
                @Touch0.performed += instance.OnTouch0;
                @Touch0.canceled += instance.OnTouch0;
                @Touch1.started += instance.OnTouch1;
                @Touch1.performed += instance.OnTouch1;
                @Touch1.canceled += instance.OnTouch1;
            }

            private void UnregisterCallbacks(ITouchActions instance)
            {
                @Touch0.started -= instance.OnTouch0;
                @Touch0.performed -= instance.OnTouch0;
                @Touch0.canceled -= instance.OnTouch0;
                @Touch1.started -= instance.OnTouch1;
                @Touch1.performed -= instance.OnTouch1;
                @Touch1.canceled -= instance.OnTouch1;
            }

            public void RemoveCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        public interface ITouchActions
        {
            void OnTouch0(InputAction.CallbackContext context);
            void OnTouch1(InputAction.CallbackContext context);
        }
    }
}
